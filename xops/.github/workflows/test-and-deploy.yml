---
name: Test, build and deploy

on:
  push:
    branches: [main, feat/*, fix/*, chore/*, test/*]
    paths-ignore:
      - '**/README.md'
      - '**/docker-compose.yml'
env:
  ECR_REPOSITORY_APP: ""
  DOCKER_BUILDKIT: 1
  IMAGE_TAG_APP: "tsops"
  GPG_KEY: ${{ secrets.GPG_KEY }}

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-22.04
    if: "! contains(github.ref, 'no_ci')"
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.3
      - name: Install requirements
        run: |
            yarn install --silent --network-concurrency 80
      - name: Run tests
        run: |
            echo "Disabled due to flaky test"
            exit 0
            set +x
            ./tools/env-locking.sh -d .env.gpg
            source .env
            ./tools/start-local.sh & 2>/dev/null
            timeout 600 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' 127.0.0.1:3002)" != "200" ]]; do sleep 10; done' || false
            ADDR=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' restack-tsops)
            sleep 1
            CI=true yarn test
            yarn stop:stack

      - name: Run linting
        run: |
            yarn lint

  build-only:
    name: Build only
    runs-on: ubuntu-22.04
    if: "contains(github.ref, 'dependabot')"
    needs: lint-and-test
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.3

  build-and-push-ecr:
    name: Build Push
    runs-on: ubuntu-22.04
    needs: lint-and-test
    env:
      # future usage
      ENV: DEV
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.3
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('**/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Build, tag ops-backend image
        id: "build-ops-backend-mage-DEV"
        if: "contains(env.ENV, 'DEV')"
        run: |
          SHORT_SHA=`git rev-parse --short HEAD`
          IMAGE_TAG="${IMAGE_TAG_APP}-${SHORT_SHA}"

          docker build \
            -t $IMAGE_TAG \
            .

          # docker tag $IMAGE_TAG current || (echo "FAIL Tagging ${IMAGE_TAG}" && exit 1)
          docker images | grep $IMAGE_TAG

